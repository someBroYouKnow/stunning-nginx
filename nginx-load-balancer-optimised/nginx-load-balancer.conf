# Define upstream servers (Docker Compose will resolve these automatically)
upstream express_backend {
    # Docker Compose service discovery will handle multiple replicas
    server express-app:3000;
}

# Custom log format to include upstream server info
log_format load_balancer '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        'upstream_server="$upstream_addr" '
                        'response_time=$request_time '
                        'container_id="$upstream_addr"';

server {
    listen 80;
    server_name localhost;

    # Configure access log with custom format
    access_log /var/log/nginx/access.log load_balancer;
    error_log /var/log/nginx/error.log;

    # Add headers to identify which server handled the request
    add_header X-Served-By $upstream_addr always;
    add_header X-Container-ID $upstream_addr always;

    location / {
        proxy_pass http://express_backend;
        
        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Health check and failover settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Retry failed requests on next upstream server
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
    }

    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}